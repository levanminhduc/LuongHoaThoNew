import { toast } from "sonner";

export interface NotificationOptions {
  title?: string;
  description?: string;
  duration?: number;
  action?: {
    label: string;
    onClick: () => void;
  };
}

export class NotificationService {
  static success(message: string, options?: NotificationOptions) {
    return toast.success(options?.title || message, {
      description: options?.description,
      duration: options?.duration || 4000,
      action: options?.action,
    });
  }

  static error(message: string, options?: NotificationOptions) {
    return toast.error(options?.title || message, {
      description: options?.description,
      duration: options?.duration || 6000,
      action: options?.action,
    });
  }

  static warning(message: string, options?: NotificationOptions) {
    return toast.warning(options?.title || message, {
      description: options?.description,
      duration: options?.duration || 5000,
      action: options?.action,
    });
  }

  static info(message: string, options?: NotificationOptions) {
    return toast.info(options?.title || message, {
      description: options?.description,
      duration: options?.duration || 4000,
      action: options?.action,
    });
  }

  static loading(message: string, options?: NotificationOptions) {
    return toast.loading(options?.title || message, {
      description: options?.description,
    });
  }

  static dismiss(toastId?: string | number) {
    if (toastId) {
      toast.dismiss(toastId);
    } else {
      toast.dismiss();
    }
  }

  static signatureSuccess(signatureType: string, signerName: string) {
    const typeLabels = {
      giam_doc: "Gi√°m ƒê·ªëc",
      ke_toan: "K·∫ø To√°n",
      nguoi_lap_bieu: "Ng∆∞·ªùi L·∫≠p Bi·ªÉu",
    };

    return this.success("K√Ω x√°c nh·∫≠n th√†nh c√¥ng!", {
      description: `${typeLabels[signatureType as keyof typeof typeLabels]} ${signerName} ƒë√£ k√Ω x√°c nh·∫≠n`,
    });
  }

  static employeeProgressUpdate(newCount: number, totalCount: number) {
    return this.info("C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô", {
      description: `${newCount}/${totalCount} nh√¢n vi√™n ƒë√£ k√Ω l∆∞∆°ng`,
    });
  }

  static completionAchieved() {
    return this.success("üéâ Ho√†n th√†nh 100%!", {
      description:
        "T·∫•t c·∫£ nh√¢n vi√™n ƒë√£ k√Ω l∆∞∆°ng. C√≥ th·ªÉ ti·∫øn h√†nh k√Ω x√°c nh·∫≠n management.",
    });
  }

  static allSignaturesComplete() {
    return this.success("üéä Ho√†n th√†nh t·∫•t c·∫£!", {
      description: "T·∫•t c·∫£ management ƒë√£ k√Ω x√°c nh·∫≠n. Quy tr√¨nh ho√†n t·∫•t!",
    });
  }

  static authenticationError() {
    return this.error("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n", {
      description: "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ti·∫øp t·ª•c",
      action: {
        label: "ƒêƒÉng nh·∫≠p",
        onClick: () => {
          window.location.href = "/admin/login";
        },
      },
    });
  }

  static networkError() {
    return this.error("L·ªói k·∫øt n·ªëi", {
      description:
        "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.",
    });
  }

  static validationError(message: string) {
    return this.warning("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", {
      description: message,
    });
  }

  static permissionDenied() {
    return this.error("Kh√¥ng c√≥ quy·ªÅn", {
      description: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y",
    });
  }

  static dataRefreshed() {
    return this.info("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t", {
      duration: 2000,
    });
  }

  static autoRefreshEnabled(interval: number) {
    const minutes = Math.floor(interval / 60000);
    const seconds = Math.floor((interval % 60000) / 1000);

    return this.info("T·ª± ƒë·ªông c·∫≠p nh·∫≠t", {
      description: `D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t m·ªói ${minutes > 0 ? `${minutes}m ` : ""}${seconds}s`,
      duration: 3000,
    });
  }

  static autoRefreshDisabled() {
    return this.info("ƒê√£ t·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t", {
      duration: 2000,
    });
  }

  static exportStarted() {
    return this.loading("ƒêang xu·∫•t d·ªØ li·ªáu...", {
      description: "Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t",
    });
  }

  static exportCompleted(filename: string) {
    return this.success("Xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng", {
      description: `File ${filename} ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng`,
    });
  }

  static importStarted() {
    return this.loading("ƒêang nh·∫≠p d·ªØ li·ªáu...", {
      description: "Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t",
    });
  }

  static importCompleted(recordCount: number) {
    return this.success("Nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng", {
      description: `ƒê√£ nh·∫≠p ${recordCount} b·∫£n ghi`,
    });
  }

  static confirmAction(
    message: string,
    onConfirm: () => void,
    options?: {
      confirmLabel?: string;
      cancelLabel?: string;
      description?: string;
    },
  ) {
    return toast(message, {
      description: options?.description,
      action: {
        label: options?.confirmLabel || "X√°c nh·∫≠n",
        onClick: onConfirm,
      },
      cancel: {
        label: options?.cancelLabel || "H·ªßy",
        onClick: () => {},
      },
    });
  }

  static progressUpdate(current: number, total: number, message?: string) {
    const percentage = Math.round((current / total) * 100);
    return this.info(message || "ƒêang x·ª≠ l√Ω...", {
      description: `${current}/${total} (${percentage}%)`,
    });
  }

  static batchOperation(
    operation: string,
    successCount: number,
    errorCount: number,
    totalCount: number,
  ) {
    if (errorCount === 0) {
      return this.success(`${operation} ho√†n th√†nh`, {
        description: `ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng ${successCount}/${totalCount} m·ª•c`,
      });
    } else {
      return this.warning(`${operation} ho√†n th√†nh v·ªõi l·ªói`, {
        description: `Th√†nh c√¥ng: ${successCount}, L·ªói: ${errorCount}, T·ªïng: ${totalCount}`,
      });
    }
  }
}

export const notify = NotificationService;
